//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id               String    @id() @default(uuid())
  name             String?
  email            String?   @unique()
  pictureUrl       String?
  stripeCustomerId String?
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime  @default(now())
  dateUpdated      DateTime  @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  roles            Role[]
  placesAsOwner    Place[]   @relation("owner")
  bookings         Booking[] @relation("user")
  reviews          Review[]  @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth().id == this.userId)
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Place {
  id          String    @id() @default(uuid())
  name        String
  description String?
  location    String?
  ownerId     String?
  owner       User?     @relation(fields: [ownerId], references: [id], name: "owner")
  bookings    Booking[] @relation("place")
  reviews     Review[]  @relation("place")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Booking {
  id          String   @id() @default(uuid())
  bookingDate String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  placeId     String?
  place       Place?   @relation(fields: [placeId], references: [id], name: "place")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id          String   @id() @default(uuid())
  rating      Float?
  comment     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  placeId     String?
  place       Place?   @relation(fields: [placeId], references: [id], name: "place")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
